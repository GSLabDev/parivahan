/*
 * Copyright (c) 2003-2019, Great Software Laboratory Pvt. Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**

 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.gslab.parivahan.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.gslab.parivahan.model.Response;
import com.gslab.parivahan.model.Ride;
import com.gslab.parivahan.model.ShuttleScheduleVO;
import com.gslab.parivahan.util.RideConstants;

import javax.validation.Valid;
import javax.validation.constraints.*;
import javax.websocket.server.PathParam;

import java.util.List;

@Api(value = "offerRide", description = "the offerRide API")
@RequestMapping("/api")
public interface OfferRideApi {

	@ApiOperation(value = "offer ride", nickname = "offerRide", notes = "Host can offer ride using this api with his vehicle details and Start and end Location", tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK, Ride Added Successfully.", response = Ride.class),
			@ApiResponse(code = 400, message = "Bad Request, All parameters are mandatory."),
			@ApiResponse(code = 404, message = "Not Found."),
			@ApiResponse(code = 500, message = "Intenal Sevrer, Unknown Error") })
	@RequestMapping(value = RideConstants.VERSION_1+"/ride", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Ride> offerRide(@ApiParam(value = "Email id of user", required = false, defaultValue = "application/json") @RequestParam(value = "email") String email,
			@ApiParam(value = "", required = true, defaultValue = "application/json") @RequestHeader(value = "Content-Type", required = true) String contentType,
			@ApiParam(value = "Ride Details", required = true) @Valid @RequestBody Ride rideParams,
			@ApiParam(value = "Show ride details only", required = false) @RequestParam boolean showDetailsOnly);
	
	
	@ApiOperation(value = "addShuttleSchedule", nickname = "addShuttleSchedule", notes = "Add Shuttle Schedule", tags = {
			"developers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Schedule Added Successfully.", response = ShuttleScheduleVO.class),
			@ApiResponse(code = 400, message = "Bad Request, All parameters are mandatory."),
			@ApiResponse(code = 404, message = "Not Found."),
			@ApiResponse(code = 500, message = "Intenal Sevrer, Unknown Error") })
	@RequestMapping(value = RideConstants.VERSION_1+"/shuttle/schedule", produces = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<ShuttleScheduleVO> addShuttleSchedule(
			@ApiParam(value = "Shuttle schedule Details", required = true) @Valid @RequestBody ShuttleScheduleVO shuttleScheduleVO);
	
	
	@ApiOperation(value = "Delete offered ride", nickname = "DeleteRide", notes = "Host can delete the offered ride using this api", tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK, Ride Added Successfully.", response = Ride.class),
			@ApiResponse(code = 400, message = "Bad Request, All parameters are mandatory."),
			@ApiResponse(code = 404, message = "Not Found."),
			@ApiResponse(code = 500, message = "Intenal Sevrer, Unknown Error") })
	@RequestMapping(value = RideConstants.VERSION_1+"/ride", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Response> deleteOfferedRide(
			@ApiParam(value = "Offer code to delete offer", required = true) @RequestParam Integer offerCode);

}