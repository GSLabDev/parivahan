/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.gslab.parivahan.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.websocket.server.PathParam;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.gslab.parivahan.model.Ride;
import com.gslab.parivahan.model.RideParams;
import com.gslab.parivahan.model.RideSearch;
import com.gslab.parivahan.util.RideConstants;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "findRide", description = "the findRide API")
@RequestMapping("/api")
public interface FindRideApi {

	@ApiOperation(value = "get joinRides", nickname = "joinRides", notes = "Api will Return Matching rides as per current location and end location", response = Ride.class, responseContainer = "List", tags = {
			"developers", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK.", response = Ride.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request"), @ApiResponse(code = 404, message = "Not Found."),
			@ApiResponse(code = 500, message = "Intenal Sevrer, Unknown Error") })
	@RequestMapping(value = RideConstants.VERSION_1+"/ride/find", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<RideSearch>> joinRides(
			@ApiParam(value = "", required = true, defaultValue = "application/json") @RequestHeader(value = "Content-Type", required = false) String contentType,
			@ApiParam(value = "Start location of Ride") @Valid @RequestParam(value = "startLocation", required = true) String startLocation,
			@ApiParam(value = "End Location of Ride") @Valid @RequestParam(value = "endLocation", required = true) String endLocation,
			@ApiParam(value = "Current GPS Location of rider") @Valid @RequestParam(value = "currentGPSLocation", required = false) String currentGPSLocation,
			@ApiParam(value = "Currnecy of country") @Valid @RequestParam(value = "currency", required = false) String currency,
			@ApiParam(value = "Start co-ordinate") @Valid @RequestParam(value = "startCoordinate", required = false) String startCoordinate,
			@ApiParam(value = "End co-ordinate") @Valid @RequestParam(value = "endrtCoordinate", required = false) String endrtCoordinate,
			@ApiParam(value = "Date of Start journey") @Valid @RequestParam(value = "Date", required = false) String date,
			@ApiParam(value = "Time to Start journey") @Valid @RequestParam(value = "Hours", required = false) String hours,
			@ApiParam(value = "Page number to search", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
			@Min(1) @ApiParam(value = "Number of seats to search for ride", defaultValue = "1") @Valid @RequestParam(value = "seats", required = false, defaultValue = "1") Integer seats,
			@ApiParam(value = "Does photo of driver is filter parameter", defaultValue = "false") @Valid @RequestParam(value = "photo", required = false, defaultValue = "false") Boolean photo,
			@ApiParam(value = "Sort rides by Date, nearest date first", defaultValue = "true") @Valid @RequestParam(value = "sort", required = false, defaultValue = "true") Boolean sort,
			@ApiParam(value = "Order rides as per charges, Lowest price first", defaultValue = "true") @Valid @RequestParam(value = "order", required = false, defaultValue = "true") Boolean order,
			@ApiParam(value = "Radius from current location to search rides in Meters", defaultValue = "0") @Valid @RequestParam(value = "radius", required = false, defaultValue = "0") Integer radius,
			@ApiParam(value = "Radius from Start Location to search rides in Meters", defaultValue = "0") @Valid @RequestParam(value = "radiusFromStartLocation", required = false, defaultValue = "0") Integer radiusFromStartLocation,
			@ApiParam(value = "Radius from End Location to search rides in Meters", defaultValue = "5") @Valid @RequestParam(value = "radiusFromEndLocation", required = false, defaultValue = "5") Integer radiusFromEndLocation,
			@ApiParam(value = "Minimum price from which search will start", defaultValue = "0") @Valid @RequestParam(value = "minPrice", required = false, defaultValue = "0") Integer minPrice,
			@ApiParam(value = "Maximum price for searching rides", defaultValue = "5000") @Valid @RequestParam(value = "maxPrice", required = false, defaultValue = "5000") Integer maxPrice,
			@ApiParam(value = "Email id of user") @RequestParam(value = "email",required =false) String email);
			

	@ApiOperation(value = "get Ride Details", nickname = "getRideDetails", notes = "Api will Return ride details as per riders current Location", response = RideSearch.class, tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK.", response = RideSearch.class),
			@ApiResponse(code = 400, message = "Bad Request, All parameters are mandatory."),
			@ApiResponse(code = 404, message = "Not Found."),
			@ApiResponse(code = 500, message = "Intenal Sevrer, Unknown Error.") })
	@RequestMapping(value = RideConstants.VERSION_1+"/ride/{rideid}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<RideSearch> getRideDetails(
			@ApiParam(value = "", required = true) @PathVariable("rideid") String rideid,
			@ApiParam(value = "ride details", required = true) @Valid @RequestBody RideParams rideParams);


	@ApiOperation(value = "get shuttle Details", nickname = "getShuttleDetails", notes = "Api will Return shuttle details", response = RideSearch.class, tags = {
			"developers", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK.", response = RideSearch.class),
			@ApiResponse(code = 400, message = "Bad Request, All parameters are mandatory."),
			@ApiResponse(code = 404, message = "Not Found."),
			@ApiResponse(code = 500, message = "Intenal Sevrer, Unknown Error.") })
	@RequestMapping(value = RideConstants.VERSION_1+"/shuttle/find/{date}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Ride>> getShuttleDetails(String contentType, String date);
}